name: Docker Build and Deploy

on:
  push:
    branches:
      - docker-build
    paths:
      - "Dockerfile"
      - "docker-compose.yml"
      - "**.py"
      - "requirements.txt"
      - ".github/workflows/**"

jobs:
  build-and-push:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha,format=long
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'docker-build') }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-22.04
    
    steps:
      - name: Setup Tailscale
        uses: tailscale/github-action@v2
        with:
          authkey: ${{ secrets.TAILSCALE_AUTHKEY }}
          version: "1.42.0"
          tags: tag:ci

      - name: Wait for Tailscale
        run: sleep 10  # Give Tailscale time to establish connection

      - name: Debug Tailscale
        run: |
          tailscale ip
          tailscale status

      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "StrictHostKeyChecking no" >> ~/.ssh/config
          
          # Debug SSH setup
          ls -la ~/.ssh
          ssh-keygen -l -f ~/.ssh/id_rsa || echo "Failed to read key"

      - name: Test Connection
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        run: |
          # Print debug information
          echo "Attempting to connect to $DEPLOY_USER@$DEPLOY_HOST"
          ssh -v $DEPLOY_USER@$DEPLOY_HOST "echo 'SSH connection successful'"

      - name: Deploy to local machine
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        run: |
          ssh $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
            set -x  # Enable command printing for debugging
            
            # Print environment info
            pwd
            whoami
            echo "Current directory: $(pwd)"
            
            # Navigate to project directory
            cd ~/Documents/vjt/hexray/practice/CI-CD || exit 1
            
            # Check if docker is running and start if needed
            if ! systemctl is-active --quiet docker; then
              sudo systemctl start docker
            fi
            
            # Deploy
            docker-compose pull
            docker-compose up -d
            docker image prune -f
          EOF