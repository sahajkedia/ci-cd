name: Server Deployment

on:
  push:
    branches:
      - vjt-ace
    paths:
      - "Dockerfile"
      - "docker-compose.yml"
      - "**.py"
      - "requirements.txt"
      - ".github/workflows/**"
      - ".streamlit/**"

jobs:
  build-and-push:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha,format=long
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'vjt-ace') }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-22.04
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VJT_ACE_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Create deployment directory
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VJT_ACE_USER }}@${{ secrets.VJT_ACE_HOST }} "mkdir -p ~/vjt_ace_app/.streamlit"

      - name: Prepare and copy configuration files
        run: |
          # Prepare docker-compose file
          sed "s|\${GITHUB_REPOSITORY}|${{ github.repository }}|g" docker-compose.yml > docker-compose.prod.yml
          
          # Copy files to server
          scp -i ~/.ssh/id_rsa docker-compose.prod.yml ${{ secrets.VJT_ACE_USER }}@${{ secrets.VJT_ACE_HOST }}:~/vjt_ace_app/docker-compose.yml
          scp -i ~/.ssh/id_rsa .streamlit/config.toml ${{ secrets.VJT_ACE_USER }}@${{ secrets.VJT_ACE_HOST }}:~/vjt_ace_app/.streamlit/

      - name: Create Docker login script
        run: |
          echo '#!/bin/bash
          echo "$1" | docker login ghcr.io -u "$2" --password-stdin' > docker-login.sh
          chmod +x docker-login.sh
          scp -i ~/.ssh/id_rsa docker-login.sh ${{ secrets.VJT_ACE_USER }}@${{ secrets.VJT_ACE_HOST }}:~/vjt_ace_app/

      - name: Deploy to server
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VJT_ACE_USER }}@${{ secrets.VJT_ACE_HOST }} << 'EOSSH'
            set -ex
            cd ~/vjt_ace_app
            
            # Stop any running containers
            docker-compose down || true
            
            # Install Docker if not installed
            if ! command -v docker &> /dev/null; then
              echo "Docker not found, installing..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker $USER
            fi
            
            # Install Docker Compose if not installed
            if ! command -v docker-compose &> /dev/null; then
              echo "Docker Compose not found, installing..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            # Ensure port 80 is available
            sudo lsof -i :80 || true
            sudo fuser -k 80/tcp || true
            
            # Install curl if not present
            if ! command -v curl &> /dev/null; then
              sudo apt-get update && sudo apt-get install -y curl
            fi
          EOSSH

      - name: Login and Deploy
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VJT_ACE_USER }}@${{ secrets.VJT_ACE_HOST }} \
            "cd ~/vjt_ace_app && \
             ./docker-login.sh '${{ secrets.GITHUB_TOKEN }}' '${{ github.actor }}' && \
             docker-compose pull && \
             docker-compose up -d"

      - name: Enhanced Verification and Debug
        run: |
         ssh -i ~/.ssh/id_rsa ${{ secrets.VJT_ACE_USER }}@${{ secrets.VJT_ACE_HOST }} << 'EOSSH'
          set -x
          cd ~/vjt_ace_app
          
          echo "=== Docker Container Status ==="
          docker-compose ps
          
          echo "=== Container Logs ==="
          docker-compose logs
          
          echo "=== Network Status ==="
          sudo netstat -tulpn | grep -E '(:80|:8501)'
          
          echo "=== Firewall Status ==="
          sudo ufw status
          
          echo "=== Testing Local Access ==="
          curl -v http://localhost:80
          
          echo "=== Container Network Info ==="
          docker network ls
          docker network inspect vjt_ace_app_default
          
          echo "=== Host Network Interface ==="
          ip addr show
          
          echo "=== System Limits ==="
          ulimit -n
          
          echo "=== SELinux Status ==="
          if command -v getenforce &> /dev/null; then
            getenforce
          else
            echo "SELinux not installed"
          fi
          
          echo "=== Testing Container Health ==="
          docker-compose exec -T streamlit curl -v http://localhost:8501/_stcore/health
        EOSSH

      - name: Verify Deployment
        run: |
          echo "Waiting for application to be ready..."
          for i in {1..30}; do
            if ssh -i ~/.ssh/id_rsa ${{ secrets.VJT_ACE_USER }}@${{ secrets.VJT_ACE_HOST }} \
               "curl -s http://localhost:80/_stcore/health" > /dev/null; then
              echo "Application is up and running!"
              echo "Access your application at: http://${{ secrets.VJT_ACE_HOST }}"
              
              # Show container status and logs
              ssh -i ~/.ssh/id_rsa ${{ secrets.VJT_ACE_USER }}@${{ secrets.VJT_ACE_HOST }} \
                "cd ~/vjt_ace_app && docker-compose ps && docker-compose logs --tail=50"
              
              exit 0
            fi
            echo "Attempt $i: Application not ready yet..."
            sleep 10
          done
          
          echo "Application failed to start within timeout. Collecting debug information..."
          
          ssh -i ~/.ssh/id_rsa ${{ secrets.VJT_ACE_USER }}@${{ secrets.VJT_ACE_HOST }} << 'EOSSH'
            cd ~/vjt_ace_app
            echo "Docker Compose Status:"
            docker-compose ps
            echo "\nContainer Logs:"
            docker-compose logs
            echo "\nPort Status:"
            sudo netstat -tulpn | grep -E '(:80|:8501)'
            echo "\nDocker Container Details:"
            docker ps -a
            echo "\nSystem Resources:"
            free -h
            df -h
          EOSSH
          
          exit 1

      - name: Cleanup
        if: always()
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VJT_ACE_USER }}@${{ secrets.VJT_ACE_HOST }} "rm -f ~/vjt_ace_app/docker-login.sh"