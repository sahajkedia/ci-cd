name: Server Deployment

on:
  push:
    branches:
      - vjt-ace
    paths:
      - "Dockerfile"
      - "docker-compose.yml"
      - "**.py"
      - "requirements.txt"
      - ".github/workflows/**"
      - ".streamlit/**"

jobs:
  build-and-push:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha,format=long
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'vjt-ace') }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-22.04
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VJT_ACE_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Create deployment directory
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VJT_ACE_USER }}@${{ secrets.VJT_ACE_HOST }} "mkdir -p ~/vjt_ace_app/.streamlit"

      - name: Setup Tailscale
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VJT_ACE_USER }}@${{ secrets.VJT_ACE_HOST }} "
            # Install Tailscale if not already installed
            if ! command -v tailscale &> /dev/null; then
              curl -fsSL https://tailscale.com/install.sh | sudo sh
            fi

            # Ensure Tailscale is running and logged in
            if ! tailscale status > /dev/null 2>&1 || tailscale status | grep -q NeedsLogin; then
              echo 'Tailscale needs login...'
              tailscale login
            fi

            # Wait for Tailscale to be ready
            for i in {1..30}; do
              if TAILSCALE_IP=\$(tailscale ip -4) && [ ! -z \"\$TAILSCALE_IP\" ]; then
                echo \"Tailscale IP: \$TAILSCALE_IP\"
                tailscale status
                break
              fi
              echo \"Waiting for Tailscale IP... Attempt \$i/30\"
              sleep 2
            done
          "

      - name: Prepare and copy configuration files
        run: |
          # Prepare docker-compose file
          sed "s|\${GITHUB_REPOSITORY}|${{ github.repository }}|g" docker-compose.yml > docker-compose.prod.yml
          
          # Copy files to server
          scp -i ~/.ssh/id_rsa docker-compose.prod.yml ${{ secrets.VJT_ACE_USER }}@${{ secrets.VJT_ACE_HOST }}:~/vjt_ace_app/docker-compose.yml
          scp -i ~/.ssh/id_rsa .streamlit/config.toml ${{ secrets.VJT_ACE_USER }}@${{ secrets.VJT_ACE_HOST }}:~/vjt_ace_app/.streamlit/

      - name: Create Docker login script
        run: |
          echo '#!/bin/bash
          echo "$1" | docker login ghcr.io -u "$2" --password-stdin' > docker-login.sh
          chmod +x docker-login.sh
          scp -i ~/.ssh/id_rsa docker-login.sh ${{ secrets.VJT_ACE_USER }}@${{ secrets.VJT_ACE_HOST }}:~/vjt_ace_app/

      - name: Prepare Server
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VJT_ACE_USER }}@${{ secrets.VJT_ACE_HOST }} << 'EOSSH'
            set -ex
            cd ~/vjt_ace_app
            
            # Stop everything that might be using port 80
            docker-compose down || true
            sudo systemctl stop tailscale-funnel.service || true
            sudo systemctl disable tailscale-funnel.service || true
            sudo tailscale funnel reset || true
            sudo tailscale serve reset || true
            sudo pkill -f "tailscale funnel" || true
            sudo fuser -k 80/tcp || true
            
            # Install Docker if needed
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker $USER
              sudo systemctl enable docker
              sudo systemctl start docker
            fi
            
            # Install Docker Compose if needed
            if ! command -v docker-compose &> /dev/null; then
              echo "Installing Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            # Wait for port 80 to be free
            echo "Ensuring port 80 is free..."
            for i in {1..30}; do
              if ! sudo lsof -i :80 && ! sudo netstat -tuln | grep ":80"; then
                echo "Port 80 is free"
                break
              fi
              echo "Port 80 still in use, attempt $i/30"
              sleep 2
            done
          EOSSH

      - name: Deploy Container
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VJT_ACE_USER }}@${{ secrets.VJT_ACE_HOST }} << 'EOSSH'
            set -ex
            cd ~/vjt_ace_app
            
            # Login to GitHub Container Registry
            ./docker-login.sh '${{ secrets.GITHUB_TOKEN }}' '${{ github.actor }}'
            
            # Pull and start the container
            docker-compose pull
            docker-compose up -d

            # Wait for container to be healthy
            echo "Waiting for container to be healthy..."
            for i in {1..30}; do
              if docker-compose ps | grep -q "healthy"; then
                echo "Container is healthy!"
                break
              fi
              echo "Attempt $i: Waiting for container health check..."
              sleep 5
            done

            # Show container status
            docker-compose ps
            docker-compose logs --tail=20
          EOSSH

      - name: Setup Tailscale Funnel
        run: |
          # Create funnel setup script
          cat << 'EOF' > setup_funnel.sh
          #!/bin/bash
          set -e

          echo "Setting up Tailscale Funnel..."
          
          # Verify container is running
          if ! docker ps | grep -q "streamlit"; then
            echo "Error: Streamlit container is not running"
            docker ps -a
            exit 1
          fi

          # Create systemd service file
          sudo tee /etc/systemd/system/tailscale-funnel.service << 'SERVICEEOF'
          [Unit]
          Description=Tailscale Funnel Service
          After=network.target tailscaled.service docker.service
          Wants=tailscaled.service
          RequiresMountsFor=/var/run/docker.sock

          [Service]
          Type=simple
          ExecStartPre=/bin/sh -c 'until nc -z localhost 80; do sleep 1; done'
          ExecStart=/usr/bin/tailscale funnel 80
          Restart=on-failure
          RestartSec=10
          User=root

          [Install]
          WantedBy=multi-user.target
          SERVICEEOF

          # Reload systemd and start service
          sudo systemctl daemon-reload
          sudo systemctl enable tailscale-funnel
          sudo systemctl restart tailscale-funnel

          # Wait for service to be ready
          echo "Waiting for funnel service..."
          for i in {1..30}; do
            if sudo systemctl is-active --quiet tailscale-funnel.service; then
              echo "Funnel service is active"
              tailscale funnel status
              exit 0
            fi
            echo "Attempt $i/30: Waiting for funnel service..."
            sleep 2
          done

          echo "Error: Funnel service failed to start"
          sudo systemctl status tailscale-funnel --no-pager
          exit 1
          EOF

          # Copy and execute script
          scp -i ~/.ssh/id_rsa setup_funnel.sh ${{ secrets.VJT_ACE_USER }}@${{ secrets.VJT_ACE_HOST }}:~/
          ssh -i ~/.ssh/id_rsa ${{ secrets.VJT_ACE_USER }}@${{ secrets.VJT_ACE_HOST }} \
            "chmod +x ~/setup_funnel.sh && ~/setup_funnel.sh && rm ~/setup_funnel.sh"

      - name: Verify Deployment
        run: |
          # Define retry function for SSH commands
          function ssh_with_retry() {
            for i in {1..5}; do
              if ssh -i ~/.ssh/id_rsa ${{ secrets.VJT_ACE_USER }}@${{ secrets.VJT_ACE_HOST }} "$1"; then
                return 0
              fi
              echo "SSH attempt $i failed, retrying in 5 seconds..."
              sleep 5
            done
            return 1
          }

          echo "Verifying deployment..."
          
          # Check application health
          echo "Checking application health..."
          for i in {1..30}; do
            if ssh_with_retry "curl -s http://localhost:80/_stcore/health > /dev/null"; then
              echo "Application is healthy!"
              break
            fi
            echo "Attempt $i: Waiting for application health check..."
            sleep 5
          done
          
          # Get deployment status
          echo "Getting deployment status..."
          ssh_with_retry "cd ~/vjt_ace_app && docker-compose ps"
          ssh_with_retry "tailscale status"
          
          # Get and display Funnel URL
          echo "Getting Funnel URL..."
          FUNNEL_URL=$(ssh_with_retry "tailscale funnel status | grep 'https://' | awk '{print \$1}'")
          
          if [ ! -z "$FUNNEL_URL" ]; then
            echo "✅ Deployment successful!"
            echo "Your application is available at: $FUNNEL_URL"
          else
            echo "❌ Failed to get Funnel URL"
            ssh_with_retry "tailscale funnel status"
            exit 1
          fi

      - name: Cleanup
        if: always()
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VJT_ACE_USER }}@${{ secrets.VJT_ACE_HOST }} \
            "rm -f ~/vjt_ace_app/docker-login.sh" || true